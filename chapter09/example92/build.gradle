//我是因为代码示例，有比较多的项目，所以把这个配置
//放在的子工程里，开发中你可以在根工程里配置，这样每个
//子工程就不用一遍遍配置了
buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'https://maven.google.com/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'
    }
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23

    useLibrary 'org.apache.http.legacy'


    defaultConfig {
        applicationId "org.flysnow.app.example92"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        flavorDimensions "versionCode"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }
    }
    productFlavors {
        google {

        }
    }

//    但是gradle插件更新到3.0.0之后，不支持
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')
//                    &&'release'.equals(variant.buildType.name)) {
//                def flavorName = variant.flavorName.startsWith("_") ? variant.flavorName.substring(1) : variant.flavorName
//                def apkFile = new File(
//                        output.outputFile.getParent(),
//                        "Example92_${flavorName}_v${variant.versionName}_${buildTime()}.apk")
//                output.outputFile = apkFile
//            }
//        }
//    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')
                    &&'release'.equals(variant.buildType.name)) {
                def flavorName = variant.flavorName.startsWith("_") ? variant.flavorName.substring(1) : variant.flavorName
                outputFileName =  "Example92_${flavorName}_v${variant.versionName}_${buildTime()}.apk"
            }
        }
    }

//    applicationVariants.all { variant ->
//        if (variant.buildType.name.equals('release')) {
//            variant.outputs.all { output ->
//                def buildName = "Downloader"
//                def type = variant.buildType.name
//                def releaseApkName = buildName + '_' + type + "_" + versionName + '_' + getTime() + '.apk'
//                outputFileName = releaseApkName
//            }
//        }
//    }
}

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
}
